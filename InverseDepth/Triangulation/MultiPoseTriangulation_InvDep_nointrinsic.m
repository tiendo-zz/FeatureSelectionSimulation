function   [FeaturesBag,PoseGraphMatrix] = MultiPoseTriangulation_InvDep_nointrinsic(FeaturesBag,           ...
                                                                    AbsolutePoses,         ...
                                                                    PoseGraphMatrix,       ...
                                                                    newPose, usedPoses,    ...
                                                                    featureExtracted, ...                                         
                                                                    CameraParams,threshold)              
                                             
newposeIdx = find(PoseGraphMatrix(:, newPose));
usedposeIdx = find(sum(PoseGraphMatrix(:, usedPoses),2));
triangulateIdx = intersect(newposeIdx, usedposeIdx);
% triangulateIdx = setdiff(triangulateIdx,find(FeaturesBag(4,:)~=0));


% MultiPoses linear triangulation
allPoses = [usedPoses, newPose];
for k = triangulateIdx'
    % 1. Find how many poses see this feature
    % (need at least three poses viewing this feature)
    posesViewkfeatIdx = find(PoseGraphMatrix(k,allPoses));    

    [temp_feat,temp_feat_xyz] = LinearMultiPoseTriangulation_InvDep_nointrinsic( ...
                                        k,AbsolutePoses, ...
                                        allPoses, ...
                                        PoseGraphMatrix, ...
                                        featureExtracted);
    if isempty(temp_feat_xyz)
        continue;
    end

    if( ChieralityCheckMultiPoses(temp_feat_xyz, AbsolutePoses, allPoses(posesViewkfeatIdx)) )
       triangulate_decision = ReprojectionMultiPose_nointrinsic(k,PoseGraphMatrix,...
                                                    allPoses,...
                                                    AbsolutePoses,...
                                                    featureExtracted,...
                                                    temp_feat_xyz,...
                                                    threshold);
        if triangulate_decision == 1
            FeaturesBag(:,k) = temp_feat;        
        end
    end
end


